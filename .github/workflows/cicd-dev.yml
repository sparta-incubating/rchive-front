name: Build and Deploy

on:
  pull_request:
    branches: [ "dev" ]
  push:
    branches: [ "dev" ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'

    - name: Install dependencies
      run: npm install

    - name: Run build
      run: npm run build

    - name: Docker login
      uses: docker/login-action@v3
      with:
        username: ${{secrets.DOCKER_USERNAME}}
        password: ${{secrets.DOCKER_HUB_TOKEN}}

    - name: Build Docker image
      run: docker build -f Dockerfile --tag ${{secrets.DOCKER_USERNAME}}/${{secrets.DOCKER_REPO}}:dev .

    - name: Push Docker image
      run: docker push ${{secrets.DOCKER_USERNAME}}/${{secrets.DOCKER_REPO}}:dev

    - name: SSH to EC2 and deploy
      uses: appleboy/ssh-action@v0.5.0
      id: deploy
      with:
        host: ${{secrets.HOST_DEV}}
        username: ${{secrets.USER}}
        key: ${{secrets.SSH_PEM_KEY}}
        envs: GITHUB_SHA
        script: |
          # Docker login
          sudo echo "${{secrets.DOCKER_HUB_TOKEN}}" | docker login -u ${{secrets.DOCKER_USERNAME}} --password-stdin

          # Stop and remove existing containers
          if [ "$(docker ps -q --filter "name=rchive-front-")" ]; then
            docker stop $(docker ps -q --filter "name=rchive-front-")
          fi
          if [ "$(docker ps -a -q -f status=exited)" ]; then
            docker rm $(docker ps -a -q -f status=exited)
          fi
            
          # Pull the latest image
          docker pull ${{secrets.DOCKER_USERNAME}}/${{secrets.DOCKER_REPO}}:dev

          # Docker run
          docker run -d \
            --name rchive-front-${VERSION} \
            -p 3000:3000 \
            -e TZ=Asia/Seoul \
            ${{secrets.DOCKER_USERNAME}}/${{secrets.DOCKER_REPO}}:dev
        
          # Remove unused images to free up space
          docker image prune -f